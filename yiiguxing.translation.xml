<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="754" />
    <option name="newTranslationDialogY" value="539" />
    <histories>
      <item value="set file offset to current plus offset" />
      <item value="define SEEK_DATA 4 set file offset to the start of the next non-hole file region greater than or equal to the supplied offset" />
      <item value="DT REG" />
      <item value="Print additional debugging information from other modes" />
      <item value="Loads .dll.so and in case of error it checks if .dll.so was built for the same architecture as Hotspot is running on" />
      <item value="macro" />
      <item value="constraint is a macro that will expand to custom function call for constraint checking if provided - see jvmFlagLimit.hpp" />
      <item value="range is a macro that will expand to min and max arguments for range checking code if provided - see jvmFlagLimit.hpp" />
      <item value="DIAGNOSTIC" />
      <item value="Unlock Diagnostic VM Options" />
      <item value="Flags must be declared with the following number of parameters:" />
      <item value="product flags are always settable visible" />
      <item value="develop flags are settable visible only during development and are constant in the PRODUCT version" />
      <item value="settable" />
      <item value="Disassembler" />
      <item value="Binutils should be configured with the '--disable-nls' flag to disable Native Language Support, otherwise you might get an &quot;undefined reference to `libintl_gettext'&quot; if you try to load hsdis.so on systems which don't have NLS by default. It also avoids build problems on other configurations that don't include the full NLS support." />
      <item value="The makefile looks for the sources in buildbinutils or you can specify its location to the makefile using BINUTILS=path. It will configure binutils and build it first and then build and link the disassembly adapter. Make all will build the default target for your platform. If your platform supports both 32 and 64 simultaneously then &quot;make both&quot; will build them both at once. &quot;make all64&quot; will explicitly build the 64 bit version. By default this will build the disassembler library only. If you build demo it will build a demo program that attempts to exercise the library. With recent version of binutils (i.e. binutils-2.23.2) you may get the following build error: WARNING: `makeinfo' is missing on your system. You should only need it if you modified a `.texi' or `.texinfo' file, or any other file ... This is because of &quot;Bug 15345 - binutils-2.23.2 tarball doesn't build without makeinfo&quot; [2]. The easiest way to work around this problem is by doing a &quot;touch BINUTILSbfddocbfd.info&quot;." />
      <item value="render" />
      <item value="all Static" />
      <item value="primitive Conversions" />
      <item value="Base class for classes used as namespaces. HotSpot style prefers using classes for grouping. Deriving from this class indicates the derived class is intended to be a namespace, with no instances ever created." />
      <item value="Cannot initialize a variable of type 'int *' with an rvalue of type 'const int *'" />
      <item value="boolalpha" />
      <item value="Clang-Tidy: Pass by value and use std::move" />
      <item value="gender" />
      <item value="explicit" />
      <item value="Clang-Tidy: Inclusion of deprecated C++ header 'string.h'; consider using 'cstring' instead" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="23" />
        <entry key="ENGLISH" value="24" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1649688216287" />
  </component>
</application>