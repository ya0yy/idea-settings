<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="754" />
    <option name="newTranslationDialogY" value="539" />
    <histories>
      <item value="before Dragging Pos" />
      <item value="grab Mouse" />
      <item value="due" />
      <item value="pause" />
      <item value="Stub Routines" />
      <item value="Link all classes for dynamic CDS dumping before vm exit." />
      <item value="examine state of thread" />
      <item value="determined" />
      <item value="Iterate through all threads until it has been determined how to stop them all at a safepoint." />
      <item value="Will spin until all threads are safe." />
      <item value="Arms the safepoint, _current_jni_active_count and _waiting_to_block must be set before." />
      <item value="thread not running" />
      <item value="rewind" />
      <item value="We must never miss a thread with correct safepoint id, so we must make sure we arm the wait barrier for the next safepoint idcounter. Arming must be done after resetting _current_jni_active_count, _waiting_to_block." />
      <item value="Arms the safepoint" />
      <item value="Arms" />
      <item value="set requires cross modify fence" />
      <item value="Mark all threads" />
      <item value="VM thread and any NonJavaThread may be running." />
      <item value="_synchronized = 2 All Java threads are running in native, blocked in OS or stopped at safepoint." />
      <item value="Record state" />
      <item value="Update the count of active JNI critical regions" />
      <item value="fence" />
      <item value="Order Access" />
      <item value="If the JavaThread checks for safepoint, verify that the lock wasn't created with safepoint_check_never." />
      <item value="Set the limit time, so that it can be compared to see if this has taken" />
      <item value="Set number of threads to wait for" />
      <item value="An operation can either be done inside a safepoint or concurrently with Java threads running." />
      <item value="By getting the Threads_lock, we assure that no threads are about to start or exit. It is released again in SafepointSynchronize::end()." />
      <item value="Roll all threads forward to a safepoint and suspend them all" />
      <item value="We must be &quot;in_vm&quot; for the code below to work correctly. Historically there must have been some exit path for which that was not the case and so we set it explicitly - even though we no longer know what that path may be." />
      <item value="naked" />
      <item value="ensure parsability" />
      <item value="make parsable" />
      <item value="retire tlabs" />
      <item value="Thread-Local Allocation Buffer (TLAB) support" />
      <item value="retire" />
      <item value="Among other things, this ensures that Eden top is correct." />
      <item value="Silent verification so as not to pollute normal output, unless we really asked for it." />
      <item value="prepare for verify" />
      <item value="doit" />
      <item value="Terminate the signal thread Note: we don't wait until it actually dies." />
      <item value="Note: we don't wait until it actually dies." />
      <item value="Terminate the signal thread" />
      <item value="Jvmti Java Thread Event Transition" />
      <item value="I PHASE PRIMORDIAL" />
      <item value="get phase" />
      <item value="should post thread life" />
      <item value="Watcher Thread" />
      <item value="wait until executed" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="123" />
        <entry key="ENGLISH" value="124" />
        <entry key="FRENCH" value="3" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1654700409772" />
  </component>
</application>